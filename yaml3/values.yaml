# Default values for yaml3.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 2

images:
  nginx:
    index:
      repository: 381492076830.dkr.ecr.ap-northeast-2.amazonaws.com/nginx-index
      tag: v1.0
      pullPolicy: Always
    login:
      repository: 381492076830.dkr.ecr.ap-northeast-2.amazonaws.com/nginx-login
      tag: v1.0
      pullPolicy: Always
    join:
      repository: 381492076830.dkr.ecr.ap-northeast-2.amazonaws.com/nginx-join
      tag: v1.0
      pullPolicy: Always
    contents:
      repository: 381492076830.dkr.ecr.ap-northeast-2.amazonaws.com/nginx-contents
      tag: v1.0
      pullPolicy: Always
    mypage:
      repository: 381492076830.dkr.ecr.ap-northeast-2.amazonaws.com/nginx-mypage
      tag: v1.0
      pullPolicy: Always
  tomcat:
    index:
      repository: 381492076830.dkr.ecr.ap-northeast-2.amazonaws.com/tomcat-index
      tag: v1.0
      pullPolicy: Always
    login:
      repository: 381492076830.dkr.ecr.ap-northeast-2.amazonaws.com/tomcat-login
      tag: v1.0
      pullPolicy: Always
    join:
      repository: 381492076830.dkr.ecr.ap-northeast-2.amazonaws.com/tomcat-join
      tag: v1.0
      pullPolicy: Always
    contents:
      repository: 381492076830.dkr.ecr.ap-northeast-2.amazonaws.com/tomcat-contents
      tag: v1.0
      pullPolicy: Always
    mypage:
      repository: 381492076830.dkr.ecr.ap-northeast-2.amazonaws.com/tomcat-mypage
      tag: v1.0
      pullPolicy: Always

deployments:
  nginx:
    - name: index
      containerPort: 80
      volumePath: "/usr/share/nginx/html/data"
      pvcName: pvc-nginx
    - name: login
      containerPort: 80
      volumePath: "/usr/share/nginx/html/data"
      pvcName: pvc-nginx
    - name: join
      containerPort: 80
      volumePath: "/usr/share/nginx/html/data"
      pvcName: pvc-nginx
    - name: contents
      containerPort: 80
      volumePath: "/usr/share/nginx/html/data"
      pvcName: pvc-nginx
    - name: mypage
      containerPort: 80
      volumePath: "/usr/share/nginx/html/data"
      pvcName: pvc-nginx
  tomcat:
    - name: index
      containerPort: 8080
      volumePath: "/opt/tomcat/webapps/ROOT/data"
      pvcName: pvc-tomcat
    - name: login
      containerPort: 8080
      volumePath: "/opt/tomcat/webapps/ROOT/data"
      pvcName: pvc-tomcat
    - name: join
      containerPort: 8080
      volumePath: "/opt/tomcat/webapps/ROOT/data"
      pvcName: pvc-tomcat
    - name: contents
      containerPort: 8080
      volumePath: "/opt/tomcat/webapps/ROOT/data"
      pvcName: pvc-tomcat
    - name: mypage
      containerPort: 8080
      volumePath: "/opt/tomcat/webapps/ROOT/data"
      pvcName: pvc-tomcat      


namespaces:
  - name: nginx
  - name: tomcat

namespace:
  nginx:
    index: nginx
    login: nginx
    join: nginx
    contents: nginx
    mypage: nginx
  tomcat:
    index: tomcat
    login: tomcat
    join: tomcat
    contents: tomcat
    mypage: tomcat

pvName:
  - pv-nginx
  - pv-tomcat

pvcName:
  - pvc-nginx
  - pvc-tomcat

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: 
    certificate-arn: arn:aws:acm:ap-northeast-2:992382512430:certificate/0718595e-93c5-461e-9423-c2ea14d9aac1
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: yaml3

service:
  port: 80

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

services:
  nginx:
    - name: index-service
      type: NodePort
      port: 80
      targetPort: 80
      nodePort: 30200
      clusterIP: 172.20.100.101
      selector:
        app: nginx
        name: index
    - name: login-service
      type: NodePort
      port: 80
      targetPort: 80
      nodePort: 30201
      clusterIP: 172.20.100.102
      selector:
        app: nginx
        name: login
    - name: join-service
      type: NodePort
      port: 80
      targetPort: 80
      nodePort: 30202
      clusterIP: 172.20.100.103
      selector:
        app: nginx
        name: join
    - name: contents-service
      type: NodePort
      port: 80
      targetPort: 80
      nodePort: 30203
      clusterIP: 172.20.100.104
      selector:
        app: nginx
        name: contents
    - name: mypage-service
      type: NodePort
      port: 80
      targetPort: 80
      nodePort: 30204
      clusterIP: 172.20.100.105
      selector:
        app: nginx
        name: mypage
  tomcat:
    - name: tomcat-index-service
      type: ClusterIP
      port: 8080
      targetPort: 8080
      clusterIP: 172.20.100.111
      selector:
        app: tomcat
        name: index
    - name: tomcat-login-service
      type: ClusterIP
      port: 8080
      targetPort: 8080
      clusterIP: 172.20.100.112
      selector:
        app: tomcat
        name: login
    - name: tomcat-join-service
      type: ClusterIP
      port: 8080
      targetPort: 8080
      clusterIP: 172.20.100.113
      selector:
        app: tomcat
        name: join
    - name: tomcat-contents-service
      type: ClusterIP
      port: 8080
      targetPort: 8080
      clusterIP: 172.20.100.114
      selector:
        app: tomcat
        name: contents
    - name: tomcat-mypage-service
      type: ClusterIP
      port: 8080
      targetPort: 8080
      clusterIP: 172.20.100.115
      selector:
        app: tomcat
        name: mypage

ingress:
  enabled: true
  name: ingress
  namespace: nginx
  className: alb
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:ap-northeast-2:381492076830:certificate/53951246-9dba-46c1-a4ef-2b488eb042e7
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
    alb.ingress.kubernetes.io/ssl-policy: ELBSecurityPolicy-2016-08
  rules:
    - host: kiminji.store
      paths:
        - path: /
          service:
            name: index-service
            port: 80
        - path: /login.jsp
          service:
            name: login-service
            port: 80
        - path: /join.jsp
          service:
            name: join-service
            port: 80
        - path: /contents.jsp
          service:
            name: contents-service
            port: 80
        - path: /mypage.jsp
          service:
            name: mypage-service
            port: 80


tls: []
#  - secretName: chart-example-tls
#    hosts:
#      - chart-example.local

resources:
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  limits:
    cpu: 200m
    memory: 250Mi
  requests:
    cpu: 200m
    memory: 250Mi

livenessProbe:
  httpGet:
    path: /
    port: 80
  initialDelaySeconds: 15
  periodSeconds: 20
  timeoutSeconds: 1
  successThreshold: 1
  failureThreshold: 3

autoscaling:
  enabled: true
  minReplicas: 1
  maxReplicas: 5
  targetCPUUtilizationPercentage: 50
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

storageClass:
  name: hf-efs-sc
  provisioner: efs.csi.aws.com

persistentVolumes:
  - name: pv-nginx
    namespace: nginx
    capacity: 5Gi
    storageClassName: hf-efs-sc
    driver: efs.csi.aws.com
    volumeHandle: fs-039f9d0ae06290ec7    #EFS filesystem ID: 만들때마다 바꿔줘야 함
  - name: pv-tomcat
    namespace: tomcat
    capacity: 5Gi
    storageClassName: hf-efs-sc
    driver: efs.csi.aws.com
    volumeHandle: fs-039f9d0ae06290ec7    #EFS filesystem ID: 만들때마다 바꿔줘야 함

persistentVolumeClaims:
  - name: pvc-nginx
    namespace: nginx
    accessModes:
      - ReadWriteMany
    volumeMode: Filesystem
    storage: 3Gi
    storageClassName: hf-efs-sc
  - name: pvc-tomcat
    namespace: tomcat
    accessModes:
      - ReadWriteMany
    volumeMode: Filesystem
    storage: 3Gi
    storageClassName: hf-efs-sc

nodeSelector: {}

tolerations: []

affinity: {}

#아래는 deployment.yaml사용시 적용용  
#affinity:
#  podAntiAffinity:
#    weight: 50
#    topologyKey: topology.kubernetes.io/zone
#    matchExpressions:
#      - key: nginx
#        operator: In
#        values:
#          - nginx

#ports:
#  - containerPort: 80

#volumeMounts:
#  - mountPath: "/usr/share/nginx/html/data"
#    name: html

#topologySpreadConstraints:
#  - maxSkew: 1
#    topologyKey: kubernetes.io/hostname
#    whenUnsatisfiable: ScheduleAnyway
#    labelSelector:
#      matchLabels:
#        app: nginx
#  - maxSkew: 1
#    topologyKey: kubernetes.io/hostname
#    whenUnsatisfiable: ScheduleAnyway
#    labelSelector:
#      matchLabels:
#        app: tomcat
          
#ports:
#  - containerPort: 8080

#volumeMounts:
#  - mountPath: "/opt/tomcat/webapps/ROOT/data"
#    name: html


